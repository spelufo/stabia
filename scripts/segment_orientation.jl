

scroll_1_54_core_px = [
  100f0*Vec3f(40.7893, 24.4325, 2.5000),
  100f0*Vec3f(40.6968, 23.6726, 7.5000),
  100f0*Vec3f(40.8146, 23.2685, 12.5000),
  100f0*Vec3f(40.3812, 22.9994, 17.5000),
  100f0*Vec3f(39.7798, 22.4042, 22.5000),
  100f0*Vec3f(38.5250, 21.8075, 27.5000),
  100f0*Vec3f(37.2981, 21.9632, 32.5000),
  100f0*Vec3f(38.0322, 22.1108, 37.5000),
  100f0*Vec3f(38.2727, 22.4664, 42.5000),
  100f0*Vec3f(37.8478, 23.7743, 47.5000),
  100f0*Vec3f(37.9543, 25.5073, 52.5000),
  100f0*Vec3f(38.5216, 28.6843, 57.5000),
  100f0*Vec3f(38.8352, 32.8236, 62.5000),
  100f0*Vec3f(37.7650, 34.8459, 67.5000),
  100f0*Vec3f(37.2105, 35.3458, 72.5000),
  100f0*Vec3f(36.4926, 35.2362, 77.5000),
  100f0*Vec3f(35.4728, 34.9789, 82.5000),
  100f0*Vec3f(34.7065, 34.9009, 87.5000),
  100f0*Vec3f(33.9290, 34.8040, 92.5000),
  100f0*Vec3f(33.6485, 35.9563, 97.5000),
  100f0*Vec3f(32.8831, 36.9041, 102.5000),
  100f0*Vec3f(31.9933, 37.8243, 107.5000),
  100f0*Vec3f(30.8478, 39.1678, 112.5000),
  100f0*Vec3f(29.7594, 40.1652, 117.5000),
  100f0*Vec3f(29.7758, 41.8506, 122.5000),
  100f0*Vec3f(29.6297, 43.8699, 127.5000),
  100f0*Vec3f(28.7917, 46.2693, 132.5000),
]

scroll_core_px(z::Real) = begin
  # TODO: Linear interpolation if needed.
  i = min(ceil(Int, z / 500f0), length(scroll_1_54_core_px))
  scroll_1_54_core_px[i]
end

segment_orientation(scan::HerculaneumScan, segment_id) = begin
  @assert scan == scroll_1_54 "Only scroll_1_54 supported for now."
  mesh = load_segment_mesh(scan, segment_id)
  n_outwards = 0
  n_inwards = 0
  for (p, n) = zip(coordinates(mesh), normals(mesh))
    c = scroll_core_px(p[3])
    r_dir = normalize(p - c) # approx, p and c not at same z, but within 250 px.
    if dot(r_dir, normalize(n)) > 0
      n_outwards += 1
    else
      n_inwards += 1
    end
  end
  @show n_outwards n_inwards
  if n_inwards > n_outwards 1f0 else -1f0 end
end


check_segments_orientation(scan::HerculaneumScan) = begin
  flipped_segments = []
  for segment_id = list_server_segments(scroll_1_54)
    if !have_segment(scan, segment_id)
      println("Skipping segment $segment_id, don't have it locally.")
      continue
    end
    GC.gc()
    println()
    @show segment_id
    ori = segment_orientation(scan, segment_id)
    if ori < 0f0
      push!(flipped_segments, segment_id)
    end
    @show ori
  end
  flipped_segments
end


flipped_segments = [
  "20230504094316", "20230504125349", "20230504171956", "20230505131816", "20230505135219",
  "20230505141722", "20230508220213", "20230510153006", "20230511201612", "20230511211540",
  "20230512112647", "20230512120728", "20230512123540", "20230514182829", "20230516112444",
  "20230516115453", "20230517021606", "20230517024455", "20230517025833", "20230517180019",
  "20230517204451", "20230518104908", "20230518181521", "20230518191548", "20230519212155",
  "20230519215753", "20230521093501", "20230521104548", "20230521114306", "20230521182226",
  "20230521193032", "20230522151031", "20230522210033", "20230522215721", "20230523002821",
  "20230523233708", "20230524004853", "20230524005636", "20230524173051", "20230524200918",
  "20230525115626", "20230525121901", "20230525234349", "20230526002441", "20230526015925",
  "20230526164930", "20230526175622", "20230526183725", "20230526205020", "20230528112855",
  "20230529203721", "20230531193658", "20230602213452", "20230609123853", "20230613144727",
  "20230619163051", "20230623123730", "20230623160629", "20230624144604", "20230624160816",
  "20230624190349", "20230625171244", "20230626140105", "20230626151618", "20230627122904",
  "20230627202005", "20230701020044", "20230705142414", "20230706165709", "20230707113838",
  "20230709211458", "20230711201157", "20230717092556", "20230719103041", "20230719214603",
  "20230720215300", "20230721122533", "20230721143008", "20230806132553", "20230808163057",
  "20230812170020", "20230820091651", "20230820174948", "20230826135043", "20230901184804",
  "20230901234823", "20230919113918", "20230922174128", "20230925002745", "20230926164853",
  "20231005123333", "20231007101615", "20231011144857", "20231016151000"
]
